
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Appointment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Appointment
 * 
 */
export type AppointmentModel = runtime.Types.Result.DefaultSelection<Prisma.$AppointmentPayload>

export type AggregateAppointment = {
  _count: AppointmentCountAggregateOutputType | null
  _avg: AppointmentAvgAggregateOutputType | null
  _sum: AppointmentSumAggregateOutputType | null
  _min: AppointmentMinAggregateOutputType | null
  _max: AppointmentMaxAggregateOutputType | null
}

export type AppointmentAvgAggregateOutputType = {
  duration: number | null
}

export type AppointmentSumAggregateOutputType = {
  duration: number | null
}

export type AppointmentMinAggregateOutputType = {
  id: string | null
  date: Date | null
  time: string | null
  duration: number | null
  status: $Enums.AppointmentStatus | null
  notes: string | null
  reason: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  doctorId: string | null
}

export type AppointmentMaxAggregateOutputType = {
  id: string | null
  date: Date | null
  time: string | null
  duration: number | null
  status: $Enums.AppointmentStatus | null
  notes: string | null
  reason: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  doctorId: string | null
}

export type AppointmentCountAggregateOutputType = {
  id: number
  date: number
  time: number
  duration: number
  status: number
  notes: number
  reason: number
  createdAt: number
  updatedAt: number
  userId: number
  doctorId: number
  _all: number
}


export type AppointmentAvgAggregateInputType = {
  duration?: true
}

export type AppointmentSumAggregateInputType = {
  duration?: true
}

export type AppointmentMinAggregateInputType = {
  id?: true
  date?: true
  time?: true
  duration?: true
  status?: true
  notes?: true
  reason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  doctorId?: true
}

export type AppointmentMaxAggregateInputType = {
  id?: true
  date?: true
  time?: true
  duration?: true
  status?: true
  notes?: true
  reason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  doctorId?: true
}

export type AppointmentCountAggregateInputType = {
  id?: true
  date?: true
  time?: true
  duration?: true
  status?: true
  notes?: true
  reason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  doctorId?: true
  _all?: true
}

export type AppointmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appointment to aggregate.
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Appointments
  **/
  _count?: true | AppointmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AppointmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AppointmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AppointmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AppointmentMaxAggregateInputType
}

export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
      [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppointment[P]>
    : Prisma.GetScalarType<T[P], AggregateAppointment[P]>
}




export type AppointmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppointmentWhereInput
  orderBy?: Prisma.AppointmentOrderByWithAggregationInput | Prisma.AppointmentOrderByWithAggregationInput[]
  by: Prisma.AppointmentScalarFieldEnum[] | Prisma.AppointmentScalarFieldEnum
  having?: Prisma.AppointmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AppointmentCountAggregateInputType | true
  _avg?: AppointmentAvgAggregateInputType
  _sum?: AppointmentSumAggregateInputType
  _min?: AppointmentMinAggregateInputType
  _max?: AppointmentMaxAggregateInputType
}

export type AppointmentGroupByOutputType = {
  id: string
  date: Date
  time: string
  duration: number
  status: $Enums.AppointmentStatus
  notes: string | null
  reason: string | null
  createdAt: Date
  updatedAt: Date
  userId: string
  doctorId: string
  _count: AppointmentCountAggregateOutputType | null
  _avg: AppointmentAvgAggregateOutputType | null
  _sum: AppointmentSumAggregateOutputType | null
  _min: AppointmentMinAggregateOutputType | null
  _max: AppointmentMaxAggregateOutputType | null
}

type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AppointmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppointmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppointmentGroupByOutputType[P]>
      }
    >
  >



export type AppointmentWhereInput = {
  AND?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[]
  OR?: Prisma.AppointmentWhereInput[]
  NOT?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[]
  id?: Prisma.StringFilter<"Appointment"> | string
  date?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  time?: Prisma.StringFilter<"Appointment"> | string
  duration?: Prisma.IntFilter<"Appointment"> | number
  status?: Prisma.EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
  notes?: Prisma.StringNullableFilter<"Appointment"> | string | null
  reason?: Prisma.StringNullableFilter<"Appointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  userId?: Prisma.StringFilter<"Appointment"> | string
  doctorId?: Prisma.StringFilter<"Appointment"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>
}

export type AppointmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  doctor?: Prisma.DoctorOrderByWithRelationInput
}

export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[]
  OR?: Prisma.AppointmentWhereInput[]
  NOT?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[]
  date?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  time?: Prisma.StringFilter<"Appointment"> | string
  duration?: Prisma.IntFilter<"Appointment"> | number
  status?: Prisma.EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
  notes?: Prisma.StringNullableFilter<"Appointment"> | string | null
  reason?: Prisma.StringNullableFilter<"Appointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  userId?: Prisma.StringFilter<"Appointment"> | string
  doctorId?: Prisma.StringFilter<"Appointment"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>
}, "id">

export type AppointmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  _count?: Prisma.AppointmentCountOrderByAggregateInput
  _avg?: Prisma.AppointmentAvgOrderByAggregateInput
  _max?: Prisma.AppointmentMaxOrderByAggregateInput
  _min?: Prisma.AppointmentMinOrderByAggregateInput
  _sum?: Prisma.AppointmentSumOrderByAggregateInput
}

export type AppointmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.AppointmentScalarWhereWithAggregatesInput | Prisma.AppointmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.AppointmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AppointmentScalarWhereWithAggregatesInput | Prisma.AppointmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Appointment"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  time?: Prisma.StringWithAggregatesFilter<"Appointment"> | string
  duration?: Prisma.IntWithAggregatesFilter<"Appointment"> | number
  status?: Prisma.EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
  notes?: Prisma.StringNullableWithAggregatesFilter<"Appointment"> | string | null
  reason?: Prisma.StringNullableWithAggregatesFilter<"Appointment"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Appointment"> | string
  doctorId?: Prisma.StringWithAggregatesFilter<"Appointment"> | string
}

export type AppointmentCreateInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAppointmentsInput
  doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput
}

export type AppointmentUncheckedCreateInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  doctorId: string
}

export type AppointmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAppointmentsNestedInput
  doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput
}

export type AppointmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentCreateManyInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  doctorId: string
}

export type AppointmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AppointmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentListRelationFilter = {
  every?: Prisma.AppointmentWhereInput
  some?: Prisma.AppointmentWhereInput
  none?: Prisma.AppointmentWhereInput
}

export type AppointmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AppointmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
}

export type AppointmentAvgOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type AppointmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
}

export type AppointmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
}

export type AppointmentSumOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type AppointmentCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput> | Prisma.AppointmentCreateWithoutUserInput[] | Prisma.AppointmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutUserInput | Prisma.AppointmentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AppointmentCreateManyUserInputEnvelope
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
}

export type AppointmentUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput> | Prisma.AppointmentCreateWithoutUserInput[] | Prisma.AppointmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutUserInput | Prisma.AppointmentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AppointmentCreateManyUserInputEnvelope
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
}

export type AppointmentUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput> | Prisma.AppointmentCreateWithoutUserInput[] | Prisma.AppointmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutUserInput | Prisma.AppointmentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AppointmentUpsertWithWhereUniqueWithoutUserInput | Prisma.AppointmentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AppointmentCreateManyUserInputEnvelope
  set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  update?: Prisma.AppointmentUpdateWithWhereUniqueWithoutUserInput | Prisma.AppointmentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AppointmentUpdateManyWithWhereWithoutUserInput | Prisma.AppointmentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
}

export type AppointmentUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput> | Prisma.AppointmentCreateWithoutUserInput[] | Prisma.AppointmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutUserInput | Prisma.AppointmentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AppointmentUpsertWithWhereUniqueWithoutUserInput | Prisma.AppointmentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AppointmentCreateManyUserInputEnvelope
  set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  update?: Prisma.AppointmentUpdateWithWhereUniqueWithoutUserInput | Prisma.AppointmentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AppointmentUpdateManyWithWhereWithoutUserInput | Prisma.AppointmentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
}

export type AppointmentCreateNestedManyWithoutDoctorInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput> | Prisma.AppointmentCreateWithoutDoctorInput[] | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutDoctorInput | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[]
  createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
}

export type AppointmentUncheckedCreateNestedManyWithoutDoctorInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput> | Prisma.AppointmentCreateWithoutDoctorInput[] | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutDoctorInput | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[]
  createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
}

export type AppointmentUpdateManyWithoutDoctorNestedInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput> | Prisma.AppointmentCreateWithoutDoctorInput[] | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutDoctorInput | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[]
  upsert?: Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
  createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope
  set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  update?: Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
  updateMany?: Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput[]
  deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
}

export type AppointmentUncheckedUpdateManyWithoutDoctorNestedInput = {
  create?: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput> | Prisma.AppointmentCreateWithoutDoctorInput[] | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[]
  connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutDoctorInput | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[]
  upsert?: Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
  createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope
  set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[]
  update?: Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
  updateMany?: Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput[]
  deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumAppointmentStatusFieldUpdateOperationsInput = {
  set?: $Enums.AppointmentStatus
}

export type AppointmentCreateWithoutUserInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput
}

export type AppointmentUncheckedCreateWithoutUserInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  doctorId: string
}

export type AppointmentCreateOrConnectWithoutUserInput = {
  where: Prisma.AppointmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput>
}

export type AppointmentCreateManyUserInputEnvelope = {
  data: Prisma.AppointmentCreateManyUserInput | Prisma.AppointmentCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AppointmentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AppointmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AppointmentUpdateWithoutUserInput, Prisma.AppointmentUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AppointmentCreateWithoutUserInput, Prisma.AppointmentUncheckedCreateWithoutUserInput>
}

export type AppointmentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AppointmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AppointmentUpdateWithoutUserInput, Prisma.AppointmentUncheckedUpdateWithoutUserInput>
}

export type AppointmentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AppointmentScalarWhereInput
  data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyWithoutUserInput>
}

export type AppointmentScalarWhereInput = {
  AND?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
  OR?: Prisma.AppointmentScalarWhereInput[]
  NOT?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[]
  id?: Prisma.StringFilter<"Appointment"> | string
  date?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  time?: Prisma.StringFilter<"Appointment"> | string
  duration?: Prisma.IntFilter<"Appointment"> | number
  status?: Prisma.EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
  notes?: Prisma.StringNullableFilter<"Appointment"> | string | null
  reason?: Prisma.StringNullableFilter<"Appointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Appointment"> | Date | string
  userId?: Prisma.StringFilter<"Appointment"> | string
  doctorId?: Prisma.StringFilter<"Appointment"> | string
}

export type AppointmentCreateWithoutDoctorInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAppointmentsInput
}

export type AppointmentUncheckedCreateWithoutDoctorInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type AppointmentCreateOrConnectWithoutDoctorInput = {
  where: Prisma.AppointmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
}

export type AppointmentCreateManyDoctorInputEnvelope = {
  data: Prisma.AppointmentCreateManyDoctorInput | Prisma.AppointmentCreateManyDoctorInput[]
  skipDuplicates?: boolean
}

export type AppointmentUpsertWithWhereUniqueWithoutDoctorInput = {
  where: Prisma.AppointmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AppointmentUpdateWithoutDoctorInput, Prisma.AppointmentUncheckedUpdateWithoutDoctorInput>
  create: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
}

export type AppointmentUpdateWithWhereUniqueWithoutDoctorInput = {
  where: Prisma.AppointmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AppointmentUpdateWithoutDoctorInput, Prisma.AppointmentUncheckedUpdateWithoutDoctorInput>
}

export type AppointmentUpdateManyWithWhereWithoutDoctorInput = {
  where: Prisma.AppointmentScalarWhereInput
  data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyWithoutDoctorInput>
}

export type AppointmentCreateManyUserInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  doctorId: string
}

export type AppointmentUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput
}

export type AppointmentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentCreateManyDoctorInput = {
  id?: string
  date: Date | string
  time: string
  duration?: number
  status?: $Enums.AppointmentStatus
  notes?: string | null
  reason?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type AppointmentUpdateWithoutDoctorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAppointmentsNestedInput
}

export type AppointmentUncheckedUpdateWithoutDoctorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AppointmentUncheckedUpdateManyWithoutDoctorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type AppointmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  status?: boolean
  notes?: boolean
  reason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  doctorId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["appointment"]>

export type AppointmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  status?: boolean
  notes?: boolean
  reason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  doctorId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["appointment"]>

export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  status?: boolean
  notes?: boolean
  reason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  doctorId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["appointment"]>

export type AppointmentSelectScalar = {
  id?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  status?: boolean
  notes?: boolean
  reason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  doctorId?: boolean
}

export type AppointmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "date" | "time" | "duration" | "status" | "notes" | "reason" | "createdAt" | "updatedAt" | "userId" | "doctorId", ExtArgs["result"]["appointment"]>
export type AppointmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}
export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}
export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>
}

export type $AppointmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Appointment"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    doctor: Prisma.$DoctorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    date: Date
    time: string
    duration: number
    status: $Enums.AppointmentStatus
    notes: string | null
    reason: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    doctorId: string
  }, ExtArgs["result"]["appointment"]>
  composites: {}
}

export type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AppointmentPayload, S>

export type AppointmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppointmentCountAggregateInputType | true
  }

export interface AppointmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
  /**
   * Find zero or one Appointment that matches the filter.
   * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
   * @example
   * // Get one Appointment
   * const appointment = await prisma.appointment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppointmentFindUniqueArgs>(args: Prisma.SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
   * @example
   * // Get one Appointment
   * const appointment = await prisma.appointment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appointment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
   * @example
   * // Get one Appointment
   * const appointment = await prisma.appointment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppointmentFindFirstArgs>(args?: Prisma.SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appointment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
   * @example
   * // Get one Appointment
   * const appointment = await prisma.appointment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Appointments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Appointments
   * const appointments = await prisma.appointment.findMany()
   * 
   * // Get first 10 Appointments
   * const appointments = await prisma.appointment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AppointmentFindManyArgs>(args?: Prisma.SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Appointment.
   * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
   * @example
   * // Create one Appointment
   * const Appointment = await prisma.appointment.create({
   *   data: {
   *     // ... data to create a Appointment
   *   }
   * })
   * 
   */
  create<T extends AppointmentCreateArgs>(args: Prisma.SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Appointments.
   * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
   * @example
   * // Create many Appointments
   * const appointment = await prisma.appointment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AppointmentCreateManyArgs>(args?: Prisma.SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Appointments and returns the data saved in the database.
   * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
   * @example
   * // Create many Appointments
   * const appointment = await prisma.appointment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Appointments and only return the `id`
   * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Appointment.
   * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
   * @example
   * // Delete one Appointment
   * const Appointment = await prisma.appointment.delete({
   *   where: {
   *     // ... filter to delete one Appointment
   *   }
   * })
   * 
   */
  delete<T extends AppointmentDeleteArgs>(args: Prisma.SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Appointment.
   * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
   * @example
   * // Update one Appointment
   * const appointment = await prisma.appointment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AppointmentUpdateArgs>(args: Prisma.SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Appointments.
   * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
   * @example
   * // Delete a few Appointments
   * const { count } = await prisma.appointment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AppointmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Appointments
   * const appointment = await prisma.appointment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AppointmentUpdateManyArgs>(args: Prisma.SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Appointments and returns the data updated in the database.
   * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
   * @example
   * // Update many Appointments
   * const appointment = await prisma.appointment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Appointments and only return the `id`
   * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Appointment.
   * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
   * @example
   * // Update or create a Appointment
   * const appointment = await prisma.appointment.upsert({
   *   create: {
   *     // ... data to create a Appointment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Appointment we want to update
   *   }
   * })
   */
  upsert<T extends AppointmentUpsertArgs>(args: Prisma.SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Appointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
   * @example
   * // Count the number of Appointments
   * const count = await prisma.appointment.count({
   *   where: {
   *     // ... the filter for the Appointments we want to count
   *   }
   * })
  **/
  count<T extends AppointmentCountArgs>(
    args?: Prisma.Subset<T, AppointmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppointmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Appointment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AppointmentAggregateArgs>(args: Prisma.Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

  /**
   * Group by Appointment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppointmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AppointmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppointmentGroupByArgs['orderBy'] }
      : { orderBy?: AppointmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Appointment model
 */
readonly fields: AppointmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Appointment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  doctor<T extends Prisma.DoctorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DoctorDefaultArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Appointment model
 */
export interface AppointmentFieldRefs {
  readonly id: Prisma.FieldRef<"Appointment", 'String'>
  readonly date: Prisma.FieldRef<"Appointment", 'DateTime'>
  readonly time: Prisma.FieldRef<"Appointment", 'String'>
  readonly duration: Prisma.FieldRef<"Appointment", 'Int'>
  readonly status: Prisma.FieldRef<"Appointment", 'AppointmentStatus'>
  readonly notes: Prisma.FieldRef<"Appointment", 'String'>
  readonly reason: Prisma.FieldRef<"Appointment", 'String'>
  readonly createdAt: Prisma.FieldRef<"Appointment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Appointment", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Appointment", 'String'>
  readonly doctorId: Prisma.FieldRef<"Appointment", 'String'>
}
    

// Custom InputTypes
/**
 * Appointment findUnique
 */
export type AppointmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter, which Appointment to fetch.
   */
  where: Prisma.AppointmentWhereUniqueInput
}

/**
 * Appointment findUniqueOrThrow
 */
export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter, which Appointment to fetch.
   */
  where: Prisma.AppointmentWhereUniqueInput
}

/**
 * Appointment findFirst
 */
export type AppointmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter, which Appointment to fetch.
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appointments.
   */
  cursor?: Prisma.AppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appointments.
   */
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * Appointment findFirstOrThrow
 */
export type AppointmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter, which Appointment to fetch.
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appointments.
   */
  cursor?: Prisma.AppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appointments.
   */
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * Appointment findMany
 */
export type AppointmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter, which Appointments to fetch.
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appointments to fetch.
   */
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Appointments.
   */
  cursor?: Prisma.AppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appointments.
   */
  skip?: number
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * Appointment create
 */
export type AppointmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Appointment.
   */
  data: Prisma.XOR<Prisma.AppointmentCreateInput, Prisma.AppointmentUncheckedCreateInput>
}

/**
 * Appointment createMany
 */
export type AppointmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Appointments.
   */
  data: Prisma.AppointmentCreateManyInput | Prisma.AppointmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Appointment createManyAndReturn
 */
export type AppointmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * The data used to create many Appointments.
   */
  data: Prisma.AppointmentCreateManyInput | Prisma.AppointmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Appointment update
 */
export type AppointmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Appointment.
   */
  data: Prisma.XOR<Prisma.AppointmentUpdateInput, Prisma.AppointmentUncheckedUpdateInput>
  /**
   * Choose, which Appointment to update.
   */
  where: Prisma.AppointmentWhereUniqueInput
}

/**
 * Appointment updateMany
 */
export type AppointmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Appointments.
   */
  data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyInput>
  /**
   * Filter which Appointments to update
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * Limit how many Appointments to update.
   */
  limit?: number
}

/**
 * Appointment updateManyAndReturn
 */
export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * The data used to update Appointments.
   */
  data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyInput>
  /**
   * Filter which Appointments to update
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * Limit how many Appointments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Appointment upsert
 */
export type AppointmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Appointment to update in case it exists.
   */
  where: Prisma.AppointmentWhereUniqueInput
  /**
   * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
   */
  create: Prisma.XOR<Prisma.AppointmentCreateInput, Prisma.AppointmentUncheckedCreateInput>
  /**
   * In case the Appointment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AppointmentUpdateInput, Prisma.AppointmentUncheckedUpdateInput>
}

/**
 * Appointment delete
 */
export type AppointmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  /**
   * Filter which Appointment to delete.
   */
  where: Prisma.AppointmentWhereUniqueInput
}

/**
 * Appointment deleteMany
 */
export type AppointmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appointments to delete
   */
  where?: Prisma.AppointmentWhereInput
  /**
   * Limit how many Appointments to delete.
   */
  limit?: number
}

/**
 * Appointment without action
 */
export type AppointmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
}
