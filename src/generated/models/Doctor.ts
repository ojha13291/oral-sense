
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Doctor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Doctor
 * 
 */
export type DoctorModel = runtime.Types.Result.DefaultSelection<Prisma.$DoctorPayload>

export type AggregateDoctor = {
  _count: DoctorCountAggregateOutputType | null
  _min: DoctorMinAggregateOutputType | null
  _max: DoctorMaxAggregateOutputType | null
}

export type DoctorMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phone: string | null
  speciality: string | null
  bio: string | null
  imageUrl: string | null
  gender: $Enums.Gender | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DoctorMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phone: string | null
  speciality: string | null
  bio: string | null
  imageUrl: string | null
  gender: $Enums.Gender | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DoctorCountAggregateOutputType = {
  id: number
  name: number
  email: number
  phone: number
  speciality: number
  bio: number
  imageUrl: number
  gender: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DoctorMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  speciality?: true
  bio?: true
  imageUrl?: true
  gender?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type DoctorMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  speciality?: true
  bio?: true
  imageUrl?: true
  gender?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type DoctorCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  speciality?: true
  bio?: true
  imageUrl?: true
  gender?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DoctorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Doctor to aggregate.
   */
  where?: Prisma.DoctorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Doctors to fetch.
   */
  orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DoctorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Doctors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Doctors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Doctors
  **/
  _count?: true | DoctorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DoctorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DoctorMaxAggregateInputType
}

export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
      [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDoctor[P]>
    : Prisma.GetScalarType<T[P], AggregateDoctor[P]>
}




export type DoctorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DoctorWhereInput
  orderBy?: Prisma.DoctorOrderByWithAggregationInput | Prisma.DoctorOrderByWithAggregationInput[]
  by: Prisma.DoctorScalarFieldEnum[] | Prisma.DoctorScalarFieldEnum
  having?: Prisma.DoctorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DoctorCountAggregateInputType | true
  _min?: DoctorMinAggregateInputType
  _max?: DoctorMaxAggregateInputType
}

export type DoctorGroupByOutputType = {
  id: string
  name: string
  email: string
  phone: string
  speciality: string
  bio: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: DoctorCountAggregateOutputType | null
  _min: DoctorMinAggregateOutputType | null
  _max: DoctorMaxAggregateOutputType | null
}

type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DoctorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DoctorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DoctorGroupByOutputType[P]>
      }
    >
  >



export type DoctorWhereInput = {
  AND?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[]
  OR?: Prisma.DoctorWhereInput[]
  NOT?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[]
  id?: Prisma.StringFilter<"Doctor"> | string
  name?: Prisma.StringFilter<"Doctor"> | string
  email?: Prisma.StringFilter<"Doctor"> | string
  phone?: Prisma.StringFilter<"Doctor"> | string
  speciality?: Prisma.StringFilter<"Doctor"> | string
  bio?: Prisma.StringNullableFilter<"Doctor"> | string | null
  imageUrl?: Prisma.StringFilter<"Doctor"> | string
  gender?: Prisma.EnumGenderFilter<"Doctor"> | $Enums.Gender
  isActive?: Prisma.BoolFilter<"Doctor"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Doctor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Doctor"> | Date | string
  appointments?: Prisma.AppointmentListRelationFilter
}

export type DoctorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  speciality?: Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  appointments?: Prisma.AppointmentOrderByRelationAggregateInput
}

export type DoctorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[]
  OR?: Prisma.DoctorWhereInput[]
  NOT?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[]
  name?: Prisma.StringFilter<"Doctor"> | string
  phone?: Prisma.StringFilter<"Doctor"> | string
  speciality?: Prisma.StringFilter<"Doctor"> | string
  bio?: Prisma.StringNullableFilter<"Doctor"> | string | null
  imageUrl?: Prisma.StringFilter<"Doctor"> | string
  gender?: Prisma.EnumGenderFilter<"Doctor"> | $Enums.Gender
  isActive?: Prisma.BoolFilter<"Doctor"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Doctor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Doctor"> | Date | string
  appointments?: Prisma.AppointmentListRelationFilter
}, "id" | "email">

export type DoctorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  speciality?: Prisma.SortOrder
  bio?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DoctorCountOrderByAggregateInput
  _max?: Prisma.DoctorMaxOrderByAggregateInput
  _min?: Prisma.DoctorMinOrderByAggregateInput
}

export type DoctorScalarWhereWithAggregatesInput = {
  AND?: Prisma.DoctorScalarWhereWithAggregatesInput | Prisma.DoctorScalarWhereWithAggregatesInput[]
  OR?: Prisma.DoctorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DoctorScalarWhereWithAggregatesInput | Prisma.DoctorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  name?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  email?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  speciality?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  bio?: Prisma.StringNullableWithAggregatesFilter<"Doctor"> | string | null
  imageUrl?: Prisma.StringWithAggregatesFilter<"Doctor"> | string
  gender?: Prisma.EnumGenderWithAggregatesFilter<"Doctor"> | $Enums.Gender
  isActive?: Prisma.BoolWithAggregatesFilter<"Doctor"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Doctor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Doctor"> | Date | string
}

export type DoctorCreateInput = {
  id?: string
  name: string
  email: string
  phone: string
  speciality: string
  bio?: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput
}

export type DoctorUncheckedCreateInput = {
  id?: string
  name: string
  email: string
  phone: string
  speciality: string
  bio?: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput
}

export type DoctorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput
}

export type DoctorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
}

export type DoctorCreateManyInput = {
  id?: string
  name: string
  email: string
  phone: string
  speciality: string
  bio?: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DoctorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DoctorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DoctorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  speciality?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DoctorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  speciality?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DoctorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  speciality?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DoctorScalarRelationFilter = {
  is?: Prisma.DoctorWhereInput
  isNot?: Prisma.DoctorWhereInput
}

export type EnumGenderFieldUpdateOperationsInput = {
  set?: $Enums.Gender
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DoctorCreateNestedOneWithoutAppointmentsInput = {
  create?: Prisma.XOR<Prisma.DoctorCreateWithoutAppointmentsInput, Prisma.DoctorUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutAppointmentsInput
  connect?: Prisma.DoctorWhereUniqueInput
}

export type DoctorUpdateOneRequiredWithoutAppointmentsNestedInput = {
  create?: Prisma.XOR<Prisma.DoctorCreateWithoutAppointmentsInput, Prisma.DoctorUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutAppointmentsInput
  upsert?: Prisma.DoctorUpsertWithoutAppointmentsInput
  connect?: Prisma.DoctorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DoctorUpdateToOneWithWhereWithoutAppointmentsInput, Prisma.DoctorUpdateWithoutAppointmentsInput>, Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput>
}

export type DoctorCreateWithoutAppointmentsInput = {
  id?: string
  name: string
  email: string
  phone: string
  speciality: string
  bio?: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DoctorUncheckedCreateWithoutAppointmentsInput = {
  id?: string
  name: string
  email: string
  phone: string
  speciality: string
  bio?: string | null
  imageUrl: string
  gender: $Enums.Gender
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DoctorCreateOrConnectWithoutAppointmentsInput = {
  where: Prisma.DoctorWhereUniqueInput
  create: Prisma.XOR<Prisma.DoctorCreateWithoutAppointmentsInput, Prisma.DoctorUncheckedCreateWithoutAppointmentsInput>
}

export type DoctorUpsertWithoutAppointmentsInput = {
  update: Prisma.XOR<Prisma.DoctorUpdateWithoutAppointmentsInput, Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput>
  create: Prisma.XOR<Prisma.DoctorCreateWithoutAppointmentsInput, Prisma.DoctorUncheckedCreateWithoutAppointmentsInput>
  where?: Prisma.DoctorWhereInput
}

export type DoctorUpdateToOneWithWhereWithoutAppointmentsInput = {
  where?: Prisma.DoctorWhereInput
  data: Prisma.XOR<Prisma.DoctorUpdateWithoutAppointmentsInput, Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput>
}

export type DoctorUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DoctorUncheckedUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  speciality?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DoctorCountOutputType
 */

export type DoctorCountOutputType = {
  appointments: number
}

export type DoctorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appointments?: boolean | DoctorCountOutputTypeCountAppointmentsArgs
}

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DoctorCountOutputType
   */
  select?: Prisma.DoctorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountAppointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppointmentWhereInput
}


export type DoctorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  speciality?: boolean
  bio?: boolean
  imageUrl?: boolean
  gender?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  appointments?: boolean | Prisma.Doctor$appointmentsArgs<ExtArgs>
  _count?: boolean | Prisma.DoctorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["doctor"]>

export type DoctorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  speciality?: boolean
  bio?: boolean
  imageUrl?: boolean
  gender?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["doctor"]>

export type DoctorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  speciality?: boolean
  bio?: boolean
  imageUrl?: boolean
  gender?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["doctor"]>

export type DoctorSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  speciality?: boolean
  bio?: boolean
  imageUrl?: boolean
  gender?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DoctorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "phone" | "speciality" | "bio" | "imageUrl" | "gender" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["doctor"]>
export type DoctorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appointments?: boolean | Prisma.Doctor$appointmentsArgs<ExtArgs>
  _count?: boolean | Prisma.DoctorCountOutputTypeDefaultArgs<ExtArgs>
}
export type DoctorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DoctorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DoctorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Doctor"
  objects: {
    appointments: Prisma.$AppointmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string
    phone: string
    speciality: string
    bio: string | null
    imageUrl: string
    gender: $Enums.Gender
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["doctor"]>
  composites: {}
}

export type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DoctorPayload, S>

export type DoctorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DoctorCountAggregateInputType | true
  }

export interface DoctorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
  /**
   * Find zero or one Doctor that matches the filter.
   * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
   * @example
   * // Get one Doctor
   * const doctor = await prisma.doctor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DoctorFindUniqueArgs>(args: Prisma.SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
   * @example
   * // Get one Doctor
   * const doctor = await prisma.doctor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Doctor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
   * @example
   * // Get one Doctor
   * const doctor = await prisma.doctor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DoctorFindFirstArgs>(args?: Prisma.SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Doctor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
   * @example
   * // Get one Doctor
   * const doctor = await prisma.doctor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Doctors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Doctors
   * const doctors = await prisma.doctor.findMany()
   * 
   * // Get first 10 Doctors
   * const doctors = await prisma.doctor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DoctorFindManyArgs>(args?: Prisma.SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Doctor.
   * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
   * @example
   * // Create one Doctor
   * const Doctor = await prisma.doctor.create({
   *   data: {
   *     // ... data to create a Doctor
   *   }
   * })
   * 
   */
  create<T extends DoctorCreateArgs>(args: Prisma.SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Doctors.
   * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
   * @example
   * // Create many Doctors
   * const doctor = await prisma.doctor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DoctorCreateManyArgs>(args?: Prisma.SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Doctors and returns the data saved in the database.
   * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
   * @example
   * // Create many Doctors
   * const doctor = await prisma.doctor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Doctors and only return the `id`
   * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Doctor.
   * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
   * @example
   * // Delete one Doctor
   * const Doctor = await prisma.doctor.delete({
   *   where: {
   *     // ... filter to delete one Doctor
   *   }
   * })
   * 
   */
  delete<T extends DoctorDeleteArgs>(args: Prisma.SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Doctor.
   * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
   * @example
   * // Update one Doctor
   * const doctor = await prisma.doctor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DoctorUpdateArgs>(args: Prisma.SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Doctors.
   * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
   * @example
   * // Delete a few Doctors
   * const { count } = await prisma.doctor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DoctorDeleteManyArgs>(args?: Prisma.SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Doctors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Doctors
   * const doctor = await prisma.doctor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DoctorUpdateManyArgs>(args: Prisma.SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Doctors and returns the data updated in the database.
   * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
   * @example
   * // Update many Doctors
   * const doctor = await prisma.doctor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Doctors and only return the `id`
   * const doctorWithIdOnly = await prisma.doctor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Doctor.
   * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
   * @example
   * // Update or create a Doctor
   * const doctor = await prisma.doctor.upsert({
   *   create: {
   *     // ... data to create a Doctor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Doctor we want to update
   *   }
   * })
   */
  upsert<T extends DoctorUpsertArgs>(args: Prisma.SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma.Prisma__DoctorClient<runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Doctors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
   * @example
   * // Count the number of Doctors
   * const count = await prisma.doctor.count({
   *   where: {
   *     // ... the filter for the Doctors we want to count
   *   }
   * })
  **/
  count<T extends DoctorCountArgs>(
    args?: Prisma.Subset<T, DoctorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DoctorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Doctor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DoctorAggregateArgs>(args: Prisma.Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

  /**
   * Group by Doctor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DoctorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DoctorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DoctorGroupByArgs['orderBy'] }
      : { orderBy?: DoctorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Doctor model
 */
readonly fields: DoctorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Doctor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  appointments<T extends Prisma.Doctor$appointmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Doctor$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Doctor model
 */
export interface DoctorFieldRefs {
  readonly id: Prisma.FieldRef<"Doctor", 'String'>
  readonly name: Prisma.FieldRef<"Doctor", 'String'>
  readonly email: Prisma.FieldRef<"Doctor", 'String'>
  readonly phone: Prisma.FieldRef<"Doctor", 'String'>
  readonly speciality: Prisma.FieldRef<"Doctor", 'String'>
  readonly bio: Prisma.FieldRef<"Doctor", 'String'>
  readonly imageUrl: Prisma.FieldRef<"Doctor", 'String'>
  readonly gender: Prisma.FieldRef<"Doctor", 'Gender'>
  readonly isActive: Prisma.FieldRef<"Doctor", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Doctor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Doctor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Doctor findUnique
 */
export type DoctorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter, which Doctor to fetch.
   */
  where: Prisma.DoctorWhereUniqueInput
}

/**
 * Doctor findUniqueOrThrow
 */
export type DoctorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter, which Doctor to fetch.
   */
  where: Prisma.DoctorWhereUniqueInput
}

/**
 * Doctor findFirst
 */
export type DoctorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter, which Doctor to fetch.
   */
  where?: Prisma.DoctorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Doctors to fetch.
   */
  orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Doctors.
   */
  cursor?: Prisma.DoctorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Doctors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Doctors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Doctors.
   */
  distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[]
}

/**
 * Doctor findFirstOrThrow
 */
export type DoctorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter, which Doctor to fetch.
   */
  where?: Prisma.DoctorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Doctors to fetch.
   */
  orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Doctors.
   */
  cursor?: Prisma.DoctorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Doctors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Doctors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Doctors.
   */
  distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[]
}

/**
 * Doctor findMany
 */
export type DoctorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter, which Doctors to fetch.
   */
  where?: Prisma.DoctorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Doctors to fetch.
   */
  orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Doctors.
   */
  cursor?: Prisma.DoctorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Doctors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Doctors.
   */
  skip?: number
  distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[]
}

/**
 * Doctor create
 */
export type DoctorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * The data needed to create a Doctor.
   */
  data: Prisma.XOR<Prisma.DoctorCreateInput, Prisma.DoctorUncheckedCreateInput>
}

/**
 * Doctor createMany
 */
export type DoctorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Doctors.
   */
  data: Prisma.DoctorCreateManyInput | Prisma.DoctorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Doctor createManyAndReturn
 */
export type DoctorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * The data used to create many Doctors.
   */
  data: Prisma.DoctorCreateManyInput | Prisma.DoctorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Doctor update
 */
export type DoctorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * The data needed to update a Doctor.
   */
  data: Prisma.XOR<Prisma.DoctorUpdateInput, Prisma.DoctorUncheckedUpdateInput>
  /**
   * Choose, which Doctor to update.
   */
  where: Prisma.DoctorWhereUniqueInput
}

/**
 * Doctor updateMany
 */
export type DoctorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Doctors.
   */
  data: Prisma.XOR<Prisma.DoctorUpdateManyMutationInput, Prisma.DoctorUncheckedUpdateManyInput>
  /**
   * Filter which Doctors to update
   */
  where?: Prisma.DoctorWhereInput
  /**
   * Limit how many Doctors to update.
   */
  limit?: number
}

/**
 * Doctor updateManyAndReturn
 */
export type DoctorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * The data used to update Doctors.
   */
  data: Prisma.XOR<Prisma.DoctorUpdateManyMutationInput, Prisma.DoctorUncheckedUpdateManyInput>
  /**
   * Filter which Doctors to update
   */
  where?: Prisma.DoctorWhereInput
  /**
   * Limit how many Doctors to update.
   */
  limit?: number
}

/**
 * Doctor upsert
 */
export type DoctorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * The filter to search for the Doctor to update in case it exists.
   */
  where: Prisma.DoctorWhereUniqueInput
  /**
   * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
   */
  create: Prisma.XOR<Prisma.DoctorCreateInput, Prisma.DoctorUncheckedCreateInput>
  /**
   * In case the Doctor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DoctorUpdateInput, Prisma.DoctorUncheckedUpdateInput>
}

/**
 * Doctor delete
 */
export type DoctorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
  /**
   * Filter which Doctor to delete.
   */
  where: Prisma.DoctorWhereUniqueInput
}

/**
 * Doctor deleteMany
 */
export type DoctorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Doctors to delete
   */
  where?: Prisma.DoctorWhereInput
  /**
   * Limit how many Doctors to delete.
   */
  limit?: number
}

/**
 * Doctor.appointments
 */
export type Doctor$appointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  where?: Prisma.AppointmentWhereInput
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  cursor?: Prisma.AppointmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * Doctor without action
 */
export type DoctorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Doctor
   */
  select?: Prisma.DoctorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Doctor
   */
  omit?: Prisma.DoctorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DoctorInclude<ExtArgs> | null
}
